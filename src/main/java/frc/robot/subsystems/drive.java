// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.motorcontrol.MotorController;
import edu.wpi.first.wpilibj.motorcontrol.MotorControllerGroup;
import edu.wpi.first.wpilibj.motorcontrol.Spark;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class drive extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private Spark frontLeft;
private Spark backLeft;
private MotorControllerGroup leftMotors;
private Spark frontRight;
private Spark backRight;
private MotorControllerGroup rightMotors;
private DifferentialDrive differentialDrive1;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public drive() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
frontLeft = new Spark(0);
 addChild("frontLeft",frontLeft);
 frontLeft.setInverted(false);

backLeft = new Spark(1);
 addChild("backLeft",backLeft);
 backLeft.setInverted(false);

leftMotors = new MotorControllerGroup(frontLeft, backLeft , frontLeft , backLeft);
 addChild("leftMotors",leftMotors);
 

frontRight = new Spark(2);
 addChild("frontRight",frontRight);
 frontRight.setInverted(false);

backRight = new Spark(3);
 addChild("backRight",backRight);
 backRight.setInverted(false);

rightMotors = new MotorControllerGroup(frontRight, backRight , frontRight , backRight);
 addChild("rightMotors",rightMotors);
 

differentialDrive1 = new DifferentialDrive(leftMotors, rightMotors);
 addChild("Differential Drive 1",differentialDrive1);
 differentialDrive1.setSafetyEnabled(true);
differentialDrive1.setExpiration(0.1);
differentialDrive1.setMaxOutput(1.0);



    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }


    public void leftMotor_group(double speed) {
        leftMotors.set(speed);
    }

    public void rightMotor_group(double speed) {
        rightMotors.set(speed);
    }
    
    public void arcadeDrive(double x, double y) {
        differentialDrive1.arcadeDrive(y, x);
    }
/*    public void frontR(double speed) {
        frontRight.set(speed);
    }

    public void backR(double speed) {
        backRight.set(speed);
    } */

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

